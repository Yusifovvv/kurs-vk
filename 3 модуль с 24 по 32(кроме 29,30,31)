#24
class Counter:

    def __init__(self, initial_count):
        self.count = initial_count  # Инициализируем счётчик с начальным значением

    def increment(self):
        self.count += 1  # Увеличиваем счётчик на 1

    def get(self):
        return self.count  # Возвращаем текущее значение счётчика


code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#25
class Circle:
    pi = 3.14

    def calculate_area(self, radius):
        return self.pi * radius**2  # Вычисляем площадь круга и возвращаем результат

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#26
class Person:
    def __init__(self, age):
        self._age = age  # Инициализируем внутренний атрибут _age

    @property
    def age(self):
        return self._age  # Возвращаем значение _age при доступе к age

    @age.setter
    def age(self, value):
        if value < 0:
            self._age = 0  # Если возраст меньше 0, устанавливаем его в 0
        else:
            self._age = value  # Иначе устанавливаем переданное значение

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#27
class Pendulum:
    g = 10
    pi = 3.14

    @classmethod
    def calculate_period(cls, length):
        return 2 * cls.pi * (length / cls.g)**0.5  # Вычисляем период и возвращаем результат

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#28
class Circle:
    _pi = 3.14

    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @property
    def pi(self):
        return self._pi

    def calculate_area(self):
        return self._pi * self._radius ** 2


class SemiCircle(Circle):
    def calculate_area(self):
        return super().calculate_area() / 2  # Делим площадь круга на 2

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#32
class Rectangle:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def calculate_area(self):
        return self.a * self.b


class Square(Rectangle):
    def __init__(self, a):
        super().__init__(a, a)  # Передаем одинаковую сторону и в a, и в b через родительский конструктор


class CalculatePerimeterMixin(Rectangle):
    def calculate_perimeter(self):
        return 2 * (self.a + self.b)


class SquareWithMixin(CalculatePerimeterMixin, Square):
    def __eq__(self, other):
        return self.a == other.a

    def __gt__(self, other):
        return self.calculate_area() > other.calculate_area()

    def __add__(self, other):
        return self.calculate_area() + other.calculate_area()

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)
