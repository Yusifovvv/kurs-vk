#33 
import os

text = input()

def write_and_read(text):
    file_path = os.path.join(os.path.abspath('/tmp'), 'my_file')
    with open(file_path, 'w') as f:
        f.write(text)
    with open(file_path, 'r') as f:
        return f.read()

print(write_and_read(text))

#34
numerator, denominator = int(input()), int(input())

def changed_div(numerator, denominator):
    try:
        return denominator / numerator
    except ZeroDivisionError:
        return denominator

print(changed_div(numerator, denominator))

#36
from itertools import zip_longest
from typing import List, Tuple


def fill_missing_values(values_list_1: List[int], values_list_2: List[int]) -> List[Tuple[int, int]]:
    return list(zip_longest(values_list_1, values_list_2, fillvalue=1))


code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#37
import datetime

days, seconds = int(input()), int(input())

def shift_time(days: int, seconds: int):
    shifted_datetime = datetime.datetime(2023, 1, 1, 12, 30, 0) + datetime.timedelta(days=days) + datetime.timedelta(seconds=seconds)
    return (shifted_datetime.day, shifted_datetime.second)

print(shift_time(days, seconds))

#38
import datetime
string_datetime = input()
def parse_time(s):
    dt = datetime.datetime.strptime(s, "%Y %m %d %H %M %S")
    return dt + datetime.timedelta(days=1)
print((parse_time(string_datetime)).day)

#39
import datetime
from collections import Counter
from typing import List


def most_common_months(dates: List[str], n) -> List[int]:
    months = []
    for date in dates:
        months.append(int(date[5:7]))
    return [month for month, count in Counter(months).most_common(n)]


code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

#40
from collections import deque
from typing import List


def rotate_list(nums: List[int], n: int):
    nums = deque(nums)
    nums.rotate(n)
    return list(nums)


code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)
#Итоговый проект 4 модуля
from typing import List


class Twitter:

    def __init__(self):
        self.tweets = {}  
        self.followers = {}
        self.time = 0  

    def post_tweet(self, user_id, tweet_id):
        self.tweets.setdefault(user_id, []).append((self.time, tweet_id))
        self.time += 1

    def get_news_feed(self, user_id) -> List[int]:
        news_feed = []
        for followee_id in self.followers.get(user_id, []):
            for tweet_time, tweet_id in self.tweets.get(followee_id, []):
                news_feed.append((tweet_time, tweet_id))
        news_feed.sort(reverse=True)
        return [tweet_id for _, tweet_id in news_feed[:10]]

    def follow(self, follower_id, followee_id):
        self.followers.setdefault(follower_id, []).append(followee_id)

    def unfollow(self, follower_id, followee_id):
        if followee_id in self.followers.get(follower_id, []):
            self.followers[follower_id].remove(followee_id)

code = []
while data := input():
    code.append(data)
code = "\n".join(code)
exec(code)

